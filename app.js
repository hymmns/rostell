class Key {
  constructor(name, type) {
    this.name = name;
    this.type = type;
  }
}

const keyObjArr = [
  new Key('SHOLADOYE', 'bar'),
  new Key('MAYOWA', 'sup'),
  new Key('OPE', 'rep'),
  new Key('ABIOLA', 'sup'),
  new Key('EDIM', 'rep'),
  new Key('LOLA', 'rep'),
  new Key('AINA', 'rep'),
  new Key('ROSEMARY', 'rep'),
  new Key('DELE', 'bar'),
  new Key('DARE', 'bar'),
  new Key('GBENGA', 'bar'),
  new Key('DAMI', 'bar'),
  new Key('JOSHUA', 'bar'),
  new Key('MAGDALENE', 'bar'),
  new Key('GABRIEL', 'bar'),
  new Key('OMOLOLA', 'bar'),
  new Key('WEEK/', 'date'),
  new Key('DATE', 'date'),
];

const data = [
  [43831],
  [
    'WEEK/',
    'SA',
    'SU',
    'M',
    'TU',
    'W',
    'TH',
    'F',
    'SA',
    'SU',
    'M',
    'T',
    'W',
    'TH',
    'F',
    'SA',
    'SU',
    'M',
    'TU',
    'W',
    'TH',
    'F',
    'SA',
    'SU',
    'M',
    'TU',
    'W',
    'TH',
    'F',
    'SA',
    'SU',
    'M',
  ],
  [
    'DATE',
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
  ],
  [],
  [
    'MAYOWA',
    'O',
    'O',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    null,
    null,
    2,
  ],
  [
    'ABIOLA',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    'H',
    'H',
    'H',
    'H',
    'H',
    'H',
    'H',
    'PH',
    'M',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'M',
    null,
    null,
    5,
  ],
  [],
  [],
  [],
  [
    'EDIM',
    'H',
    'H',
    'M',
    'M',
    'M',
    'M',
    'O',
    'O',
    'M',
    'M',
    'M',
    'M',
    'M',
    'O',
    'O',
    'M',
    'M',
    'M',
    'M',
    'PH',
    'O',
    'O',
    'M',
    'M',
    'M',
    'M',
    'M',
    'O',
    'O',
    null,
    null,
    3,
  ],
  [
    'LOLA',
    'O',
    'O',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    'M',
    'N',
    'H',
    'H',
    'H',
    'H',
    'H',
    'H',
    'H',
    'PH',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    null,
    null,
    1,
  ],
  [
    'AINA',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'M',
    'M',
    'N',
    'O',
    'O',
    'M',
    'M',
    'M',
    'M',
    'N',
    'O',
    'O',
    'PH',
    'M',
    'M',
    'M',
    'N',
    'O',
    'O',
    'M',
    'M',
    'M',
    'N',
    null,
    null,
    2,
  ],
  [
    'OPE',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    'H',
    'H',
    'H',
    'H',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'PH',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    null,
    null,
    2,
  ],
  [
    'ROSEMARY',
    'M',
    'M',
    'O',
    'O',
    'PH',
    'M',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'N',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'M',
    'N',
    'N',
    null,
    null,
    1,
  ],
  [],
  [],
  [],
  [
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    ' ',
  ],
  [
    'DELE',
    'O',
    'O',
    'M',
    'M',
    'M',
    'PH',
    'M',
    'O',
    'O',
    'M',
    'M',
    'M',
    'N',
    'O',
    'O',
    'M',
    'M',
    'M',
    'PH',
    'M',
    'O',
    'O',
    'M',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    null,
    null,
    4,
  ],
  [
    'DARE',
    'M',
    'M',
    'N',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'N',
    'N',
    'PH',
    'O',
    'O',
    'M',
    'M',
    'N',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    null,
    null,
    4,
  ],
  [
    'GBENGA',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    'PH',
    'M',
    'M',
    'N',
    'O',
    'O',
    'PH',
    'M',
    'M',
    'M',
    'N',
    'O',
    'O',
    'PH',
    'M',
    'M',
    'M',
    'N',
    null,
    null,
    4,
  ],
  [
    'DAMI',
    'N',
    'O',
    'O',
    'PH',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'M',
    'N',
    'O',
    'O',
    'M',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'M',
    'N',
    'N',
    'O',
    null,
    null,
    4,
  ],
  [
    'JOSHUA',
    'O',
    'M',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'PH',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'N',
    'PH',
    'M',
    'O',
    'O',
    'M',
    null,
    null,
    6,
  ],
  [
    'MAGDALENE',
    'O',
    'O',
    'M',
    'M',
    'M',
    'M',
    'N',
    'O',
    'O',
    'M',
    'PH',
    'M',
    'N',
    'O',
    'O',
    'M',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'M',
    'PH',
    'M',
    'O',
    'O',
    null,
    null,
    4,
  ],
  [
    'GABRIEL',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'M',
    'N',
    'PH',
    'O',
    'O',
    'M',
    'M',
    'M',
    null,
    null,
    5,
  ],
  [
    'SHOLADOYE',
    'O',
    'M',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'M',
    'N',
    'O',
    'O',
    'M',
    'M',
    'M',
    'N',
    'PH',
    'O',
    'O',
    'M',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    'M',
    null,
    null,
    2,
  ],
  [
    'OMOLOLA',
    'M',
    'N',
    'O',
    'O',
    'PH',
    'M',
    'M',
    'M',
    'O',
    'O',
    'M',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'M',
    'N',
    'N',
    'O',
    'O',
    'M',
    'M',
    'M',
    'N',
    'N',
    null,
    null,
    2,
  ],
  [],
  [],
  [],
  ['*  ALL SHIFT CHANGE MUST BE RUN BY THE LOUNGE MANAGER FOR APPROVAL'],
  [],
  [
    '*  ALL PUBLIC HOLIDAY NEED NOT INCLUDED IN THE ROOSTER MUST FIRST BE APPROVED BY THE LOUNGE MANAGER',
  ],
  [],
  [
    '*  ALL LEAVE FORMS MUST BE DULY FILLED, SIGNED AND SUBMITTED BEFORE PROCEEDING ON ANY APPROVED LEAVE FAILURE OF WHICH SUCH WILL BE ASSUMED ABSENT AND PENALITIES ISSUED',
  ],
  [],
  [
    '*   AD =  AN ALL DAY SHIFT FOR THE MEMBER OF TEAM ON WHICH IT APPEARED . THANK YOU FOR YOUR TEAM  STRENGTH',
  ],
  [],
  [],
  [],
  [],
  [],
];
const d = new Date();
const month = [
  'JAN',
  'FEB',
  'MAR',
  'APR',
  'MAY',
  'JUNE',
  'JULY',
  'AUG',
  'SEPT',
  'OCT',
  'NOV',
  'DEC',
];

const createHtmlTable = (data, keyObjArr) => {
  let prevClass = '';
  document.getElementById('mon').innerHTML = `${month[d.getMonth()]}
	-${d.getFullYear()}`;

  data.map((val) => {
    const tbRow = document.createElement('tr');

    keyObjArr.map((key) => {
      if (val[0] === key.name)
        val.map((innerVal, index) => {
          const tbData = document.createElement('td');
          tbData.innerHTML =
            typeof innerVal === 'object'
              ? `<td></td>`
              : `<td><strong>${innerVal}</strong></td>`;
          if (index === d.getDate()) tbData.setAttribute('class', 'active');
          tbRow.appendChild(tbData);

          const rowGroup = document.createElement('tbody');
          rowGroup.setAttribute('id', `${key.type}Id`);
          if (prevClass !== key.type) {
            rowGroup.setAttribute('class', `${key.type}`);
            rowGroup.appendChild(tbRow);
            prevClass = key.type;
            document.getElementById('data').appendChild(rowGroup);
          } else {
            document.getElementById(`${key.type}Id`).appendChild(tbRow);
          }
        });
    });
  });
};

const startSW = () => {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.register('./sw.js');
    console.log('service worker started');
  }
};

createHtmlTable(data, keyObjArr);
startSW();
